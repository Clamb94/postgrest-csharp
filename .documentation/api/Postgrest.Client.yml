### YamlMime:ManagedReference
items:
- uid: Postgrest.Client
  commentId: T:Postgrest.Client
  id: Client
  parent: Postgrest
  children:
  - Postgrest.Client.BaseUrl
  - Postgrest.Client.Initialize(System.String,Postgrest.ClientAuthorization,Postgrest.ClientOptions)
  - Postgrest.Client.Instance
  - Postgrest.Client.Rpc(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Postgrest.Client.SerializerSettings
  - Postgrest.Client.Table``1
  langs:
  - csharp
  - vb
  name: Client
  nameWithType: Client
  fullName: Postgrest.Client
  type: Class
  source:
    remote:
      path: Postgrest/Client.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Client
    path: Postgrest/Client.cs
    startLine: 16
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nA Singleton that represents a single, reusable connection to a Postgrest endpoint. Should be first called with the `Initialize()` method.\n"
  example: []
  syntax:
    content: public class Client
    content.vb: Public Class Client
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Postgrest.Client.BaseUrl
  commentId: P:Postgrest.Client.BaseUrl
  id: BaseUrl
  parent: Postgrest.Client
  langs:
  - csharp
  - vb
  name: BaseUrl
  nameWithType: Client.BaseUrl
  fullName: Postgrest.Client.BaseUrl
  type: Property
  source:
    remote:
      path: Postgrest/Client.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: BaseUrl
    path: Postgrest/Client.cs
    startLine: 21
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nAPI Base Url for subsequent calls.\n"
  example: []
  syntax:
    content: public string BaseUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BaseUrl As String
  overload: Postgrest.Client.BaseUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Postgrest.Client.Instance
  commentId: P:Postgrest.Client.Instance
  id: Instance
  parent: Postgrest.Client
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: Client.Instance
  fullName: Postgrest.Client.Instance
  type: Property
  source:
    remote:
      path: Postgrest/Client.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Instance
    path: Postgrest/Client.cs
    startLine: 30
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nReturns the Singleton Instance of this Class.\n"
  example: []
  syntax:
    content: public static Client Instance { get; }
    parameters: []
    return:
      type: Postgrest.Client
    content.vb: Public Shared ReadOnly Property Instance As Client
  overload: Postgrest.Client.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Postgrest.Client.Initialize(System.String,Postgrest.ClientAuthorization,Postgrest.ClientOptions)
  commentId: M:Postgrest.Client.Initialize(System.String,Postgrest.ClientAuthorization,Postgrest.ClientOptions)
  id: Initialize(System.String,Postgrest.ClientAuthorization,Postgrest.ClientOptions)
  parent: Postgrest.Client
  langs:
  - csharp
  - vb
  name: Initialize(String, ClientAuthorization, ClientOptions)
  nameWithType: Client.Initialize(String, ClientAuthorization, ClientOptions)
  fullName: Postgrest.Client.Initialize(System.String, Postgrest.ClientAuthorization, Postgrest.ClientOptions)
  type: Method
  source:
    remote:
      path: Postgrest/Client.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Initialize
    path: Postgrest/Client.cs
    startLine: 50
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nShould be the first call to this class to initialize a connection with a Postgrest API Server\n"
  example: []
  syntax:
    content: public Client Initialize(string baseUrl, ClientAuthorization authorization, ClientOptions options = null)
    parameters:
    - id: baseUrl
      type: System.String
      description: 'Api Endpoint (ex: &quot;http://localhost:8000&quot;), no trailing slash required.'
    - id: authorization
      type: Postgrest.ClientAuthorization
      description: Authorization Information.
    - id: options
      type: Postgrest.ClientOptions
      description: Optional client configuration.
    return:
      type: Postgrest.Client
      description: ''
    content.vb: Public Function Initialize(baseUrl As String, authorization As ClientAuthorization, options As ClientOptions = Nothing) As Client
  overload: Postgrest.Client.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Postgrest.Client.SerializerSettings
  commentId: P:Postgrest.Client.SerializerSettings
  id: SerializerSettings
  parent: Postgrest.Client
  langs:
  - csharp
  - vb
  name: SerializerSettings
  nameWithType: Client.SerializerSettings
  fullName: Postgrest.Client.SerializerSettings
  type: Property
  source:
    remote:
      path: Postgrest/Client.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: SerializerSettings
    path: Postgrest/Client.cs
    startLine: 72
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nCustom Serializer resolvers and converters that will be used for encoding and decoding Postgrest JSON responses.\n\nBy default, Postgrest seems to use a date format that C# and Newtonsoft do not like, so this initial\nconfiguration handles that.\n"
  example: []
  syntax:
    content: public JsonSerializerSettings SerializerSettings { get; }
    parameters: []
    return:
      type: JsonSerializerSettings
    content.vb: Public ReadOnly Property SerializerSettings As JsonSerializerSettings
  overload: Postgrest.Client.SerializerSettings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Postgrest.Client.Table``1
  commentId: M:Postgrest.Client.Table``1
  id: Table``1
  parent: Postgrest.Client
  langs:
  - csharp
  - vb
  name: Table<T>()
  nameWithType: Client.Table<T>()
  fullName: Postgrest.Client.Table<T>()
  type: Method
  source:
    remote:
      path: Postgrest/Client.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Table
    path: Postgrest/Client.cs
    startLine: 97
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nReturns a Table Query Builder instance for a defined model - representative of `USE $TABLE`\n"
  example: []
  syntax:
    content: >-
      public Table<T> Table<T>()

          where T : BaseModel, new()
    typeParameters:
    - id: T
      description: Custom Model derived from `BaseModel`
    return:
      type: Postgrest.Table{{T}}
      description: ''
    content.vb: Public Function Table(Of T As {BaseModel, New}) As Table(Of T)
  overload: Postgrest.Client.Table*
  nameWithType.vb: Client.Table(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Client.Table(Of T)()
  name.vb: Table(Of T)()
- uid: Postgrest.Client.Rpc(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Postgrest.Client.Rpc(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Rpc(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Postgrest.Client
  langs:
  - csharp
  - vb
  name: Rpc(String, Dictionary<String, Object>)
  nameWithType: Client.Rpc(String, Dictionary<String, Object>)
  fullName: Postgrest.Client.Rpc(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Postgrest/Client.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Rpc
    path: Postgrest/Client.cs
    startLine: 105
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nPerform a stored procedure call.\n"
  example: []
  syntax:
    content: public Task<BaseResponse> Rpc(string procedureName, Dictionary<string, object> parameters)
    parameters:
    - id: procedureName
      type: System.String
      description: The function name to call
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: The parameters to pass to the function call
    return:
      type: System.Threading.Tasks.Task{Postgrest.Responses.BaseResponse}
      description: ''
    content.vb: Public Function Rpc(procedureName As String, parameters As Dictionary(Of String, Object)) As Task(Of BaseResponse)
  overload: Postgrest.Client.Rpc*
  nameWithType.vb: Client.Rpc(String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Client.Rpc(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Rpc(String, Dictionary(Of String, Object))
references:
- uid: Postgrest
  commentId: N:Postgrest
  name: Postgrest
  nameWithType: Postgrest
  fullName: Postgrest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Postgrest.Client.BaseUrl*
  commentId: Overload:Postgrest.Client.BaseUrl
  name: BaseUrl
  nameWithType: Client.BaseUrl
  fullName: Postgrest.Client.BaseUrl
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Postgrest.Client.Instance*
  commentId: Overload:Postgrest.Client.Instance
  name: Instance
  nameWithType: Client.Instance
  fullName: Postgrest.Client.Instance
- uid: Postgrest.Client
  commentId: T:Postgrest.Client
  parent: Postgrest
  name: Client
  nameWithType: Client
  fullName: Postgrest.Client
- uid: Postgrest.Client.Initialize*
  commentId: Overload:Postgrest.Client.Initialize
  name: Initialize
  nameWithType: Client.Initialize
  fullName: Postgrest.Client.Initialize
- uid: Postgrest.ClientAuthorization
  commentId: T:Postgrest.ClientAuthorization
  parent: Postgrest
  name: ClientAuthorization
  nameWithType: ClientAuthorization
  fullName: Postgrest.ClientAuthorization
- uid: Postgrest.ClientOptions
  commentId: T:Postgrest.ClientOptions
  parent: Postgrest
  name: ClientOptions
  nameWithType: ClientOptions
  fullName: Postgrest.ClientOptions
- uid: Postgrest.Client.SerializerSettings*
  commentId: Overload:Postgrest.Client.SerializerSettings
  name: SerializerSettings
  nameWithType: Client.SerializerSettings
  fullName: Postgrest.Client.SerializerSettings
- uid: JsonSerializerSettings
  commentId: '!:JsonSerializerSettings'
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: JsonSerializerSettings
- uid: Postgrest.Client.Table*
  commentId: Overload:Postgrest.Client.Table
  name: Table
  nameWithType: Client.Table
  fullName: Postgrest.Client.Table
- uid: Postgrest.Table{{T}}
  commentId: T:Postgrest.Table{``0}
  parent: Postgrest
  definition: Postgrest.Table`1
  name: Table<T>
  nameWithType: Table<T>
  fullName: Postgrest.Table<T>
  nameWithType.vb: Table(Of T)
  fullName.vb: Postgrest.Table(Of T)
  name.vb: Table(Of T)
  spec.csharp:
  - uid: Postgrest.Table`1
    name: Table
    nameWithType: Table
    fullName: Postgrest.Table
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Postgrest.Table`1
    name: Table
    nameWithType: Table
    fullName: Postgrest.Table
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Postgrest.Table`1
  commentId: T:Postgrest.Table`1
  parent: Postgrest
  name: Table<T>
  nameWithType: Table<T>
  fullName: Postgrest.Table<T>
  nameWithType.vb: Table(Of T)
  fullName.vb: Postgrest.Table(Of T)
  name.vb: Table(Of T)
  spec.csharp:
  - uid: Postgrest.Table`1
    name: Table
    nameWithType: Table
    fullName: Postgrest.Table
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Postgrest.Table`1
    name: Table
    nameWithType: Table
    fullName: Postgrest.Table
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Postgrest.Client.Rpc*
  commentId: Overload:Postgrest.Client.Rpc
  name: Rpc
  nameWithType: Client.Rpc
  fullName: Postgrest.Client.Rpc
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Postgrest.Responses.BaseResponse}
  commentId: T:System.Threading.Tasks.Task{Postgrest.Responses.BaseResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<BaseResponse>
  nameWithType: Task<BaseResponse>
  fullName: System.Threading.Tasks.Task<Postgrest.Responses.BaseResponse>
  nameWithType.vb: Task(Of BaseResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Postgrest.Responses.BaseResponse)
  name.vb: Task(Of BaseResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Postgrest.Responses.BaseResponse
    name: BaseResponse
    nameWithType: BaseResponse
    fullName: Postgrest.Responses.BaseResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Postgrest.Responses.BaseResponse
    name: BaseResponse
    nameWithType: BaseResponse
    fullName: Postgrest.Responses.BaseResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
