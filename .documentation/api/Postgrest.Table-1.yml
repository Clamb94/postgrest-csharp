### YamlMime:ManagedReference
items:
- uid: Postgrest.Table`1
  commentId: T:Postgrest.Table`1
  id: Table`1
  parent: Postgrest
  children:
  - Postgrest.Table`1.#ctor(System.String,Postgrest.ClientAuthorization,Postgrest.ClientOptions)
  - Postgrest.Table`1.And(System.Collections.Generic.List{Postgrest.QueryFilter})
  - Postgrest.Table`1.BaseUrl
  - Postgrest.Table`1.Clear
  - Postgrest.Table`1.Delete
  - Postgrest.Table`1.Delete(`0)
  - Postgrest.Table`1.Filter(System.String,Postgrest.Constants.Operator,System.Object)
  - Postgrest.Table`1.Get
  - Postgrest.Table`1.Insert(`0,Postgrest.InsertOptions)
  - Postgrest.Table`1.Insert(System.Collections.Generic.ICollection{`0},Postgrest.InsertOptions)
  - Postgrest.Table`1.Limit(System.Int32,System.String)
  - Postgrest.Table`1.Match(System.Collections.Generic.Dictionary{System.String,System.String})
  - Postgrest.Table`1.Not(Postgrest.QueryFilter)
  - Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.Collections.Generic.List{System.Object})
  - Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.String)
  - Postgrest.Table`1.Offset(System.Int32,System.String)
  - Postgrest.Table`1.Or(System.Collections.Generic.List{Postgrest.QueryFilter})
  - Postgrest.Table`1.Order(System.String,Postgrest.Constants.Ordering,Postgrest.Constants.NullPosition)
  - Postgrest.Table`1.Order(System.String,System.String,Postgrest.Constants.Ordering,Postgrest.Constants.NullPosition)
  - Postgrest.Table`1.Range(System.Int32)
  - Postgrest.Table`1.Range(System.Int32,System.Int32)
  - Postgrest.Table`1.Select(System.String)
  - Postgrest.Table`1.Single
  - Postgrest.Table`1.Update(`0)
  langs:
  - csharp
  - vb
  name: Table<T>
  nameWithType: Table<T>
  fullName: Postgrest.Table<T>
  type: Class
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Table
    path: Postgrest/Table.cs
    startLine: 22
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nClass created from a model derived from `BaseModel` that can generate query requests to a Postgrest Endpoint.\n\nRepresentative of a `USE $TABLE` command.\n"
  example: []
  syntax:
    content: >-
      public class Table<T>

          where T : BaseModel, new()
    typeParameters:
    - id: T
      description: Model derived from `BaseModel`.
    content.vb: Public Class Table(Of T As {BaseModel, New})
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Table(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Postgrest.Table(Of T)
  name.vb: Table(Of T)
- uid: Postgrest.Table`1.BaseUrl
  commentId: P:Postgrest.Table`1.BaseUrl
  id: BaseUrl
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: BaseUrl
  nameWithType: Table<T>.BaseUrl
  fullName: Postgrest.Table<T>.BaseUrl
  type: Property
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: BaseUrl
    path: Postgrest/Table.cs
    startLine: 24
  assemblies:
  - Postgrest
  namespace: Postgrest
  syntax:
    content: public string BaseUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BaseUrl As String
  overload: Postgrest.Table`1.BaseUrl*
  nameWithType.vb: Table(Of T).BaseUrl
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Postgrest.Table(Of T).BaseUrl
- uid: Postgrest.Table`1.#ctor(System.String,Postgrest.ClientAuthorization,Postgrest.ClientOptions)
  commentId: M:Postgrest.Table`1.#ctor(System.String,Postgrest.ClientAuthorization,Postgrest.ClientOptions)
  id: '#ctor(System.String,Postgrest.ClientAuthorization,Postgrest.ClientOptions)'
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Table(String, ClientAuthorization, ClientOptions)
  nameWithType: Table<T>.Table(String, ClientAuthorization, ClientOptions)
  fullName: Postgrest.Table<T>.Table(System.String, Postgrest.ClientAuthorization, Postgrest.ClientOptions)
  type: Constructor
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: .ctor
    path: Postgrest/Table.cs
    startLine: 52
  assemblies:
  - Postgrest
  namespace: Postgrest
  syntax:
    content: public Table(string baseUrl, ClientAuthorization authorization, ClientOptions options = null)
    parameters:
    - id: baseUrl
      type: System.String
    - id: authorization
      type: Postgrest.ClientAuthorization
    - id: options
      type: Postgrest.ClientOptions
    content.vb: Public Sub New(baseUrl As String, authorization As ClientAuthorization, options As ClientOptions = Nothing)
  overload: Postgrest.Table`1.#ctor*
  nameWithType.vb: Table(Of T).Table(String, ClientAuthorization, ClientOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Table(System.String, Postgrest.ClientAuthorization, Postgrest.ClientOptions)
- uid: Postgrest.Table`1.Filter(System.String,Postgrest.Constants.Operator,System.Object)
  commentId: M:Postgrest.Table`1.Filter(System.String,Postgrest.Constants.Operator,System.Object)
  id: Filter(System.String,Postgrest.Constants.Operator,System.Object)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Filter(String, Constants.Operator, Object)
  nameWithType: Table<T>.Filter(String, Constants.Operator, Object)
  fullName: Postgrest.Table<T>.Filter(System.String, Postgrest.Constants.Operator, System.Object)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Filter
    path: Postgrest/Table.cs
    startLine: 80
  assemblies:
  - Postgrest
  namespace: Postgrest
  syntax:
    content: public Table<T> Filter(string columnName, Constants.Operator op, object criterion)
    parameters:
    - id: columnName
      type: System.String
    - id: op
      type: Postgrest.Constants.Operator
    - id: criterion
      type: System.Object
    return:
      type: Postgrest.Table`1
    content.vb: Public Function Filter(columnName As String, op As Constants.Operator, criterion As Object) As Table(Of T)
  overload: Postgrest.Table`1.Filter*
  nameWithType.vb: Table(Of T).Filter(String, Constants.Operator, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Filter(System.String, Postgrest.Constants.Operator, System.Object)
- uid: Postgrest.Table`1.Not(Postgrest.QueryFilter)
  commentId: M:Postgrest.Table`1.Not(Postgrest.QueryFilter)
  id: Not(Postgrest.QueryFilter)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Not(QueryFilter)
  nameWithType: Table<T>.Not(QueryFilter)
  fullName: Postgrest.Table<T>.Not(Postgrest.QueryFilter)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Not
    path: Postgrest/Table.cs
    startLine: 133
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nAdds a NOT filter to the current query args.\n"
  example: []
  syntax:
    content: public Table<T> Not(QueryFilter filter)
    parameters:
    - id: filter
      type: Postgrest.QueryFilter
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Not(filter As QueryFilter) As Table(Of T)
  overload: Postgrest.Table`1.Not*
  nameWithType.vb: Table(Of T).Not(QueryFilter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Not(Postgrest.QueryFilter)
- uid: Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.String)
  commentId: M:Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.String)
  id: Not(System.String,Postgrest.Constants.Operator,System.String)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Not(String, Constants.Operator, String)
  nameWithType: Table<T>.Not(String, Constants.Operator, String)
  fullName: Postgrest.Table<T>.Not(System.String, Postgrest.Constants.Operator, System.String)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Not
    path: Postgrest/Table.cs
    startLine: 151
  assemblies:
  - Postgrest
  namespace: Postgrest
  syntax:
    content: public Table<T> Not(string columnName, Constants.Operator op, string criterion)
    parameters:
    - id: columnName
      type: System.String
    - id: op
      type: Postgrest.Constants.Operator
    - id: criterion
      type: System.String
    return:
      type: Postgrest.Table`1
    content.vb: Public Function Not(columnName As String, op As Constants.Operator, criterion As String) As Table(Of T)
  overload: Postgrest.Table`1.Not*
  nameWithType.vb: Table(Of T).Not(String, Constants.Operator, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Not(System.String, Postgrest.Constants.Operator, System.String)
- uid: Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.Collections.Generic.List{System.Object})
  commentId: M:Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.Collections.Generic.List{System.Object})
  id: Not(System.String,Postgrest.Constants.Operator,System.Collections.Generic.List{System.Object})
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Not(String, Constants.Operator, List<Object>)
  nameWithType: Table<T>.Not(String, Constants.Operator, List<Object>)
  fullName: Postgrest.Table<T>.Not(System.String, Postgrest.Constants.Operator, System.Collections.Generic.List<System.Object>)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Not
    path: Postgrest/Table.cs
    startLine: 164
  assemblies:
  - Postgrest
  namespace: Postgrest
  syntax:
    content: public Table<T> Not(string columnName, Constants.Operator op, List<object> criteria)
    parameters:
    - id: columnName
      type: System.String
    - id: op
      type: Postgrest.Constants.Operator
    - id: criteria
      type: System.Collections.Generic.List{System.Object}
    return:
      type: Postgrest.Table`1
    content.vb: Public Function Not(columnName As String, op As Constants.Operator, criteria As List(Of Object)) As Table(Of T)
  overload: Postgrest.Table`1.Not*
  nameWithType.vb: Table(Of T).Not(String, Constants.Operator, List(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Not(System.String, Postgrest.Constants.Operator, System.Collections.Generic.List(Of System.Object))
  name.vb: Not(String, Constants.Operator, List(Of Object))
- uid: Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Postgrest.Table`1.Not(System.String,Postgrest.Constants.Operator,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Not(System.String,Postgrest.Constants.Operator,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Not(String, Constants.Operator, Dictionary<String, Object>)
  nameWithType: Table<T>.Not(String, Constants.Operator, Dictionary<String, Object>)
  fullName: Postgrest.Table<T>.Not(System.String, Postgrest.Constants.Operator, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Not
    path: Postgrest/Table.cs
    startLine: 173
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nAdds a NOT filter to the current query args.\n"
  example: []
  syntax:
    content: public Table<T> Not(string columnName, Constants.Operator op, Dictionary<string, object> criteria)
    parameters:
    - id: columnName
      type: System.String
      description: ''
    - id: op
      type: Postgrest.Constants.Operator
      description: ''
    - id: criteria
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Not(columnName As String, op As Constants.Operator, criteria As Dictionary(Of String, Object)) As Table(Of T)
  overload: Postgrest.Table`1.Not*
  nameWithType.vb: Table(Of T).Not(String, Constants.Operator, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Not(System.String, Postgrest.Constants.Operator, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Not(String, Constants.Operator, Dictionary(Of String, Object))
- uid: Postgrest.Table`1.And(System.Collections.Generic.List{Postgrest.QueryFilter})
  commentId: M:Postgrest.Table`1.And(System.Collections.Generic.List{Postgrest.QueryFilter})
  id: And(System.Collections.Generic.List{Postgrest.QueryFilter})
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: And(List<QueryFilter>)
  nameWithType: Table<T>.And(List<QueryFilter>)
  fullName: Postgrest.Table<T>.And(System.Collections.Generic.List<Postgrest.QueryFilter>)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: And
    path: Postgrest/Table.cs
    startLine: 180
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nAdds an AND Filter to the current query args.\n"
  example: []
  syntax:
    content: public Table<T> And(List<QueryFilter> filters)
    parameters:
    - id: filters
      type: System.Collections.Generic.List{Postgrest.QueryFilter}
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function And(filters As List(Of QueryFilter)) As Table(Of T)
  overload: Postgrest.Table`1.And*
  nameWithType.vb: Table(Of T).And(List(Of QueryFilter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).And(System.Collections.Generic.List(Of Postgrest.QueryFilter))
  name.vb: And(List(Of QueryFilter))
- uid: Postgrest.Table`1.Or(System.Collections.Generic.List{Postgrest.QueryFilter})
  commentId: M:Postgrest.Table`1.Or(System.Collections.Generic.List{Postgrest.QueryFilter})
  id: Or(System.Collections.Generic.List{Postgrest.QueryFilter})
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Or(List<QueryFilter>)
  nameWithType: Table<T>.Or(List<QueryFilter>)
  fullName: Postgrest.Table<T>.Or(System.Collections.Generic.List<Postgrest.QueryFilter>)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Or
    path: Postgrest/Table.cs
    startLine: 191
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nAdds a NOT Filter to the current query args.\n"
  example: []
  syntax:
    content: public Table<T> Or(List<QueryFilter> filters)
    parameters:
    - id: filters
      type: System.Collections.Generic.List{Postgrest.QueryFilter}
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Or(filters As List(Of QueryFilter)) As Table(Of T)
  overload: Postgrest.Table`1.Or*
  nameWithType.vb: Table(Of T).Or(List(Of QueryFilter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Or(System.Collections.Generic.List(Of Postgrest.QueryFilter))
  name.vb: Or(List(Of QueryFilter))
- uid: Postgrest.Table`1.Match(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:Postgrest.Table`1.Match(System.Collections.Generic.Dictionary{System.String,System.String})
  id: Match(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Match(Dictionary<String, String>)
  nameWithType: Table<T>.Match(Dictionary<String, String>)
  fullName: Postgrest.Table<T>.Match(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Match
    path: Postgrest/Table.cs
    startLine: 202
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nFinds all rows whose columns match the specified `query` object.\n"
  example: []
  syntax:
    content: public Table<T> Match(Dictionary<string, string> query)
    parameters:
    - id: query
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: The object to filter with, with column names as keys mapped to their filter values.
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Match(query As Dictionary(Of String, String)) As Table(Of T)
  overload: Postgrest.Table`1.Match*
  nameWithType.vb: Table(Of T).Match(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Match(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Match(Dictionary(Of String, String))
- uid: Postgrest.Table`1.Order(System.String,Postgrest.Constants.Ordering,Postgrest.Constants.NullPosition)
  commentId: M:Postgrest.Table`1.Order(System.String,Postgrest.Constants.Ordering,Postgrest.Constants.NullPosition)
  id: Order(System.String,Postgrest.Constants.Ordering,Postgrest.Constants.NullPosition)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Order(String, Constants.Ordering, Constants.NullPosition)
  nameWithType: Table<T>.Order(String, Constants.Ordering, Constants.NullPosition)
  fullName: Postgrest.Table<T>.Order(System.String, Postgrest.Constants.Ordering, Postgrest.Constants.NullPosition)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Order
    path: Postgrest/Table.cs
    startLine: 219
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nAdds an ordering to the current query args.\n"
  example: []
  syntax:
    content: public Table<T> Order(string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = Constants.NullPosition.First)
    parameters:
    - id: column
      type: System.String
      description: Column Name
    - id: ordering
      type: Postgrest.Constants.Ordering
      description: ''
    - id: nullPosition
      type: Postgrest.Constants.NullPosition
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Order(column As String, ordering As Constants.Ordering, nullPosition As Constants.NullPosition = Constants.NullPosition.First) As Table(Of T)
  overload: Postgrest.Table`1.Order*
  nameWithType.vb: Table(Of T).Order(String, Constants.Ordering, Constants.NullPosition)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Order(System.String, Postgrest.Constants.Ordering, Postgrest.Constants.NullPosition)
- uid: Postgrest.Table`1.Order(System.String,System.String,Postgrest.Constants.Ordering,Postgrest.Constants.NullPosition)
  commentId: M:Postgrest.Table`1.Order(System.String,System.String,Postgrest.Constants.Ordering,Postgrest.Constants.NullPosition)
  id: Order(System.String,System.String,Postgrest.Constants.Ordering,Postgrest.Constants.NullPosition)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Order(String, String, Constants.Ordering, Constants.NullPosition)
  nameWithType: Table<T>.Order(String, String, Constants.Ordering, Constants.NullPosition)
  fullName: Postgrest.Table<T>.Order(System.String, System.String, Postgrest.Constants.Ordering, Postgrest.Constants.NullPosition)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Order
    path: Postgrest/Table.cs
    startLine: 233
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nAdds an ordering to the current query args.\n"
  example: []
  syntax:
    content: public Table<T> Order(string foreignTable, string column, Constants.Ordering ordering, Constants.NullPosition nullPosition = Constants.NullPosition.First)
    parameters:
    - id: foreignTable
      type: System.String
      description: ''
    - id: column
      type: System.String
      description: ''
    - id: ordering
      type: Postgrest.Constants.Ordering
      description: ''
    - id: nullPosition
      type: Postgrest.Constants.NullPosition
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Order(foreignTable As String, column As String, ordering As Constants.Ordering, nullPosition As Constants.NullPosition = Constants.NullPosition.First) As Table(Of T)
  overload: Postgrest.Table`1.Order*
  nameWithType.vb: Table(Of T).Order(String, String, Constants.Ordering, Constants.NullPosition)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Order(System.String, System.String, Postgrest.Constants.Ordering, Postgrest.Constants.NullPosition)
- uid: Postgrest.Table`1.Range(System.Int32)
  commentId: M:Postgrest.Table`1.Range(System.Int32)
  id: Range(System.Int32)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Range(Int32)
  nameWithType: Table<T>.Range(Int32)
  fullName: Postgrest.Table<T>.Range(System.Int32)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Range
    path: Postgrest/Table.cs
    startLine: 245
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nSets a FROM range, similar to a `StartAt` query.\n"
  example: []
  syntax:
    content: public Table<T> Range(int from)
    parameters:
    - id: from
      type: System.Int32
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Range(from As Integer) As Table(Of T)
  overload: Postgrest.Table`1.Range*
  nameWithType.vb: Table(Of T).Range(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Range(System.Int32)
- uid: Postgrest.Table`1.Range(System.Int32,System.Int32)
  commentId: M:Postgrest.Table`1.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Range(Int32, Int32)
  nameWithType: Table<T>.Range(Int32, Int32)
  fullName: Postgrest.Table<T>.Range(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Range
    path: Postgrest/Table.cs
    startLine: 257
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nSets a bounded range to the current query.\n"
  example: []
  syntax:
    content: public Table<T> Range(int from, int to)
    parameters:
    - id: from
      type: System.Int32
      description: ''
    - id: to
      type: System.Int32
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Range(from As Integer, to As Integer) As Table(Of T)
  overload: Postgrest.Table`1.Range*
  nameWithType.vb: Table(Of T).Range(Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Range(System.Int32, System.Int32)
- uid: Postgrest.Table`1.Select(System.String)
  commentId: M:Postgrest.Table`1.Select(System.String)
  id: Select(System.String)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Select(String)
  nameWithType: Table<T>.Select(String)
  fullName: Postgrest.Table<T>.Select(System.String)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Select
    path: Postgrest/Table.cs
    startLine: 269
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nSelect columns for query. \n"
  example: []
  syntax:
    content: public Table<T> Select(string columnQuery)
    parameters:
    - id: columnQuery
      type: System.String
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Select(columnQuery As String) As Table(Of T)
  overload: Postgrest.Table`1.Select*
  nameWithType.vb: Table(Of T).Select(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Select(System.String)
- uid: Postgrest.Table`1.Limit(System.Int32,System.String)
  commentId: M:Postgrest.Table`1.Limit(System.Int32,System.String)
  id: Limit(System.Int32,System.String)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Limit(Int32, String)
  nameWithType: Table<T>.Limit(Int32, String)
  fullName: Postgrest.Table<T>.Limit(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Limit
    path: Postgrest/Table.cs
    startLine: 283
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nSets a limit with an optional foreign table reference. \n"
  example: []
  syntax:
    content: public Table<T> Limit(int limit, string foreignTableName = null)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    - id: foreignTableName
      type: System.String
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Limit(limit As Integer, foreignTableName As String = Nothing) As Table(Of T)
  overload: Postgrest.Table`1.Limit*
  nameWithType.vb: Table(Of T).Limit(Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Limit(System.Int32, System.String)
- uid: Postgrest.Table`1.Offset(System.Int32,System.String)
  commentId: M:Postgrest.Table`1.Offset(System.Int32,System.String)
  id: Offset(System.Int32,System.String)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Offset(Int32, String)
  nameWithType: Table<T>.Offset(Int32, String)
  fullName: Postgrest.Table<T>.Offset(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Offset
    path: Postgrest/Table.cs
    startLine: 297
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nSets an offset with an optional foreign table reference.\n"
  example: []
  syntax:
    content: public Table<T> Offset(int offset, string foreignTableName = null)
    parameters:
    - id: offset
      type: System.Int32
      description: ''
    - id: foreignTableName
      type: System.String
      description: ''
    return:
      type: Postgrest.Table`1
      description: ''
    content.vb: Public Function Offset(offset As Integer, foreignTableName As String = Nothing) As Table(Of T)
  overload: Postgrest.Table`1.Offset*
  nameWithType.vb: Table(Of T).Offset(Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Offset(System.Int32, System.String)
- uid: Postgrest.Table`1.Insert(`0,Postgrest.InsertOptions)
  commentId: M:Postgrest.Table`1.Insert(`0,Postgrest.InsertOptions)
  id: Insert(`0,Postgrest.InsertOptions)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Insert(T, InsertOptions)
  nameWithType: Table<T>.Insert(T, InsertOptions)
  fullName: Postgrest.Table<T>.Insert(T, Postgrest.InsertOptions)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Insert
    path: Postgrest/Table.cs
    startLine: 310
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nExecutes an INSERT query using the defined query params on the current instance.\n"
  example: []
  syntax:
    content: public Task<ModeledResponse<T>> Insert(T model, InsertOptions options = null)
    parameters:
    - id: model
      type: '{T}'
      description: ''
    - id: options
      type: Postgrest.InsertOptions
      description: ''
    return:
      type: System.Threading.Tasks.Task{Postgrest.Responses.ModeledResponse{{T}}}
      description: A typed model response from the database.
    content.vb: Public Function Insert(model As T, options As InsertOptions = Nothing) As Task(Of ModeledResponse(Of T))
  overload: Postgrest.Table`1.Insert*
  nameWithType.vb: Table(Of T).Insert(T, InsertOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Insert(T, Postgrest.InsertOptions)
- uid: Postgrest.Table`1.Insert(System.Collections.Generic.ICollection{`0},Postgrest.InsertOptions)
  commentId: M:Postgrest.Table`1.Insert(System.Collections.Generic.ICollection{`0},Postgrest.InsertOptions)
  id: Insert(System.Collections.Generic.ICollection{`0},Postgrest.InsertOptions)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Insert(ICollection<T>, InsertOptions)
  nameWithType: Table<T>.Insert(ICollection<T>, InsertOptions)
  fullName: Postgrest.Table<T>.Insert(System.Collections.Generic.ICollection<T>, Postgrest.InsertOptions)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Insert
    path: Postgrest/Table.cs
    startLine: 318
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nExecutes a BULK INSERT query using the defined query params on the current instance.\n"
  example: []
  syntax:
    content: public Task<ModeledResponse<T>> Insert(ICollection<T> models, InsertOptions options = null)
    parameters:
    - id: models
      type: System.Collections.Generic.ICollection{{T}}
    - id: options
      type: Postgrest.InsertOptions
      description: ''
    return:
      type: System.Threading.Tasks.Task{Postgrest.Responses.ModeledResponse{{T}}}
      description: A typed model response from the database.
    content.vb: Public Function Insert(models As ICollection(Of T), options As InsertOptions = Nothing) As Task(Of ModeledResponse(Of T))
  overload: Postgrest.Table`1.Insert*
  nameWithType.vb: Table(Of T).Insert(ICollection(Of T), InsertOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Insert(System.Collections.Generic.ICollection(Of T), Postgrest.InsertOptions)
  name.vb: Insert(ICollection(Of T), InsertOptions)
- uid: Postgrest.Table`1.Update(`0)
  commentId: M:Postgrest.Table`1.Update(`0)
  id: Update(`0)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Update(T)
  nameWithType: Table<T>.Update(T)
  fullName: Postgrest.Table<T>.Update(T)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Update
    path: Postgrest/Table.cs
    startLine: 325
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nExecutes an UPDATE query using the defined query params on the current instance.\n"
  example: []
  syntax:
    content: public Task<ModeledResponse<T>> Update(T model)
    parameters:
    - id: model
      type: '{T}'
      description: ''
    return:
      type: System.Threading.Tasks.Task{Postgrest.Responses.ModeledResponse{{T}}}
      description: A typed response from the database.
    content.vb: Public Function Update(model As T) As Task(Of ModeledResponse(Of T))
  overload: Postgrest.Table`1.Update*
  nameWithType.vb: Table(Of T).Update(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Update(T)
- uid: Postgrest.Table`1.Delete
  commentId: M:Postgrest.Table`1.Delete
  id: Delete
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: Table<T>.Delete()
  fullName: Postgrest.Table<T>.Delete()
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Delete
    path: Postgrest/Table.cs
    startLine: 347
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nExecutes a delete request using the defined query params on the current instance.\n"
  example: []
  syntax:
    content: public Task Delete()
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function Delete As Task
  overload: Postgrest.Table`1.Delete*
  nameWithType.vb: Table(Of T).Delete()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Delete()
- uid: Postgrest.Table`1.Delete(`0)
  commentId: M:Postgrest.Table`1.Delete(`0)
  id: Delete(`0)
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Delete(T)
  nameWithType: Table<T>.Delete(T)
  fullName: Postgrest.Table<T>.Delete(T)
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Delete
    path: Postgrest/Table.cs
    startLine: 363
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nExecutes a delete request using the model&apos;s primary key as the filter for the request.\n"
  example: []
  syntax:
    content: public Task Delete(T model)
    parameters:
    - id: model
      type: '{T}'
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function Delete(model As T) As Task
  overload: Postgrest.Table`1.Delete*
  nameWithType.vb: Table(Of T).Delete(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Delete(T)
- uid: Postgrest.Table`1.Single
  commentId: M:Postgrest.Table`1.Single
  id: Single
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Single()
  nameWithType: Table<T>.Single()
  fullName: Postgrest.Table<T>.Single()
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Single
    path: Postgrest/Table.cs
    startLine: 377
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nExecutes a query that expects to have a single object returned, rather than returning list of models\nit will return a single model.\n"
  example: []
  syntax:
    content: public Task<T> Single()
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: Public Function Single As Task(Of T)
  overload: Postgrest.Table`1.Single*
  nameWithType.vb: Table(Of T).Single()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Single()
- uid: Postgrest.Table`1.Get
  commentId: M:Postgrest.Table`1.Get
  id: Get
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Get()
  nameWithType: Table<T>.Get()
  fullName: Postgrest.Table<T>.Get()
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Get
    path: Postgrest/Table.cs
    startLine: 420
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nExecutes the query using the defined filters on the current instance.\n"
  example: []
  syntax:
    content: public Task<ModeledResponse<T>> Get()
    return:
      type: System.Threading.Tasks.Task{Postgrest.Responses.ModeledResponse{{T}}}
      description: ''
    content.vb: Public Function Get As Task(Of ModeledResponse(Of T))
  overload: Postgrest.Table`1.Get*
  nameWithType.vb: Table(Of T).Get()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Get()
- uid: Postgrest.Table`1.Clear
  commentId: M:Postgrest.Table`1.Clear
  id: Clear
  parent: Postgrest.Table`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Table<T>.Clear()
  fullName: Postgrest.Table<T>.Clear()
  type: Method
  source:
    remote:
      path: Postgrest/Table.cs
      branch: master
      repo: https://github.com/supabase/postgrest-csharp.git
    id: Clear
    path: Postgrest/Table.cs
    startLine: 604
  assemblies:
  - Postgrest
  namespace: Postgrest
  summary: "\nClears currently defined query values.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Postgrest.Table`1.Clear*
  nameWithType.vb: Table(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Postgrest.Table(Of T).Clear()
references:
- uid: Postgrest
  commentId: N:Postgrest
  name: Postgrest
  nameWithType: Postgrest
  fullName: Postgrest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Postgrest.Table`1.BaseUrl*
  commentId: Overload:Postgrest.Table`1.BaseUrl
  name: BaseUrl
  nameWithType: Table<T>.BaseUrl
  fullName: Postgrest.Table<T>.BaseUrl
  nameWithType.vb: Table(Of T).BaseUrl
  fullName.vb: Postgrest.Table(Of T).BaseUrl
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Postgrest.Table`1.#ctor*
  commentId: Overload:Postgrest.Table`1.#ctor
  name: Table
  nameWithType: Table<T>.Table
  fullName: Postgrest.Table<T>.Table
  nameWithType.vb: Table(Of T).Table
  fullName.vb: Postgrest.Table(Of T).Table
- uid: Postgrest.ClientAuthorization
  commentId: T:Postgrest.ClientAuthorization
  parent: Postgrest
  name: ClientAuthorization
  nameWithType: ClientAuthorization
  fullName: Postgrest.ClientAuthorization
- uid: Postgrest.ClientOptions
  commentId: T:Postgrest.ClientOptions
  parent: Postgrest
  name: ClientOptions
  nameWithType: ClientOptions
  fullName: Postgrest.ClientOptions
- uid: Postgrest.Table`1.Filter*
  commentId: Overload:Postgrest.Table`1.Filter
  name: Filter
  nameWithType: Table<T>.Filter
  fullName: Postgrest.Table<T>.Filter
  nameWithType.vb: Table(Of T).Filter
  fullName.vb: Postgrest.Table(Of T).Filter
- uid: Postgrest.Constants.Operator
  commentId: T:Postgrest.Constants.Operator
  parent: Postgrest
  name: Constants.Operator
  nameWithType: Constants.Operator
  fullName: Postgrest.Constants.Operator
- uid: Postgrest.Table`1
  commentId: T:Postgrest.Table`1
  parent: Postgrest
  name: Table<T>
  nameWithType: Table<T>
  fullName: Postgrest.Table<T>
  nameWithType.vb: Table(Of T)
  fullName.vb: Postgrest.Table(Of T)
  name.vb: Table(Of T)
  spec.csharp:
  - uid: Postgrest.Table`1
    name: Table
    nameWithType: Table
    fullName: Postgrest.Table
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Postgrest.Table`1
    name: Table
    nameWithType: Table
    fullName: Postgrest.Table
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Postgrest.Table`1.Not*
  commentId: Overload:Postgrest.Table`1.Not
  name: Not
  nameWithType: Table<T>.Not
  fullName: Postgrest.Table<T>.Not
  nameWithType.vb: Table(Of T).Not
  fullName.vb: Postgrest.Table(Of T).Not
- uid: Postgrest.QueryFilter
  commentId: T:Postgrest.QueryFilter
  parent: Postgrest
  name: QueryFilter
  nameWithType: QueryFilter
  fullName: Postgrest.QueryFilter
- uid: System.Collections.Generic.List{System.Object}
  commentId: T:System.Collections.Generic.List{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Object>
  nameWithType: List<Object>
  fullName: System.Collections.Generic.List<System.Object>
  nameWithType.vb: List(Of Object)
  fullName.vb: System.Collections.Generic.List(Of System.Object)
  name.vb: List(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Postgrest.Table`1.And*
  commentId: Overload:Postgrest.Table`1.And
  name: And
  nameWithType: Table<T>.And
  fullName: Postgrest.Table<T>.And
  nameWithType.vb: Table(Of T).And
  fullName.vb: Postgrest.Table(Of T).And
- uid: System.Collections.Generic.List{Postgrest.QueryFilter}
  commentId: T:System.Collections.Generic.List{Postgrest.QueryFilter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<QueryFilter>
  nameWithType: List<QueryFilter>
  fullName: System.Collections.Generic.List<Postgrest.QueryFilter>
  nameWithType.vb: List(Of QueryFilter)
  fullName.vb: System.Collections.Generic.List(Of Postgrest.QueryFilter)
  name.vb: List(Of QueryFilter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Postgrest.QueryFilter
    name: QueryFilter
    nameWithType: QueryFilter
    fullName: Postgrest.QueryFilter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Postgrest.QueryFilter
    name: QueryFilter
    nameWithType: QueryFilter
    fullName: Postgrest.QueryFilter
  - name: )
    nameWithType: )
    fullName: )
- uid: Postgrest.Table`1.Or*
  commentId: Overload:Postgrest.Table`1.Or
  name: Or
  nameWithType: Table<T>.Or
  fullName: Postgrest.Table<T>.Or
  nameWithType.vb: Table(Of T).Or
  fullName.vb: Postgrest.Table(Of T).Or
- uid: Postgrest.Table`1.Match*
  commentId: Overload:Postgrest.Table`1.Match
  name: Match
  nameWithType: Table<T>.Match
  fullName: Postgrest.Table<T>.Match
  nameWithType.vb: Table(Of T).Match
  fullName.vb: Postgrest.Table(Of T).Match
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Postgrest.Table`1.Order*
  commentId: Overload:Postgrest.Table`1.Order
  name: Order
  nameWithType: Table<T>.Order
  fullName: Postgrest.Table<T>.Order
  nameWithType.vb: Table(Of T).Order
  fullName.vb: Postgrest.Table(Of T).Order
- uid: Postgrest.Constants.Ordering
  commentId: T:Postgrest.Constants.Ordering
  parent: Postgrest
  name: Constants.Ordering
  nameWithType: Constants.Ordering
  fullName: Postgrest.Constants.Ordering
- uid: Postgrest.Constants.NullPosition
  commentId: T:Postgrest.Constants.NullPosition
  parent: Postgrest
  name: Constants.NullPosition
  nameWithType: Constants.NullPosition
  fullName: Postgrest.Constants.NullPosition
- uid: Postgrest.Table`1.Range*
  commentId: Overload:Postgrest.Table`1.Range
  name: Range
  nameWithType: Table<T>.Range
  fullName: Postgrest.Table<T>.Range
  nameWithType.vb: Table(Of T).Range
  fullName.vb: Postgrest.Table(Of T).Range
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Postgrest.Table`1.Select*
  commentId: Overload:Postgrest.Table`1.Select
  name: Select
  nameWithType: Table<T>.Select
  fullName: Postgrest.Table<T>.Select
  nameWithType.vb: Table(Of T).Select
  fullName.vb: Postgrest.Table(Of T).Select
- uid: Postgrest.Table`1.Limit*
  commentId: Overload:Postgrest.Table`1.Limit
  name: Limit
  nameWithType: Table<T>.Limit
  fullName: Postgrest.Table<T>.Limit
  nameWithType.vb: Table(Of T).Limit
  fullName.vb: Postgrest.Table(Of T).Limit
- uid: Postgrest.Table`1.Offset*
  commentId: Overload:Postgrest.Table`1.Offset
  name: Offset
  nameWithType: Table<T>.Offset
  fullName: Postgrest.Table<T>.Offset
  nameWithType.vb: Table(Of T).Offset
  fullName.vb: Postgrest.Table(Of T).Offset
- uid: Postgrest.Table`1.Insert*
  commentId: Overload:Postgrest.Table`1.Insert
  name: Insert
  nameWithType: Table<T>.Insert
  fullName: Postgrest.Table<T>.Insert
  nameWithType.vb: Table(Of T).Insert
  fullName.vb: Postgrest.Table(Of T).Insert
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Postgrest.InsertOptions
  commentId: T:Postgrest.InsertOptions
  parent: Postgrest
  name: InsertOptions
  nameWithType: InsertOptions
  fullName: Postgrest.InsertOptions
- uid: System.Threading.Tasks.Task{Postgrest.Responses.ModeledResponse{{T}}}
  commentId: T:System.Threading.Tasks.Task{Postgrest.Responses.ModeledResponse{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ModeledResponse<T>>
  nameWithType: Task<ModeledResponse<T>>
  fullName: System.Threading.Tasks.Task<Postgrest.Responses.ModeledResponse<T>>
  nameWithType.vb: Task(Of ModeledResponse(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Postgrest.Responses.ModeledResponse(Of T))
  name.vb: Task(Of ModeledResponse(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Postgrest.Responses.ModeledResponse`1
    name: ModeledResponse
    nameWithType: ModeledResponse
    fullName: Postgrest.Responses.ModeledResponse
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Postgrest.Responses.ModeledResponse`1
    name: ModeledResponse
    nameWithType: ModeledResponse
    fullName: Postgrest.Responses.ModeledResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Postgrest.Table`1.Update*
  commentId: Overload:Postgrest.Table`1.Update
  name: Update
  nameWithType: Table<T>.Update
  fullName: Postgrest.Table<T>.Update
  nameWithType.vb: Table(Of T).Update
  fullName.vb: Postgrest.Table(Of T).Update
- uid: Postgrest.Table`1.Delete*
  commentId: Overload:Postgrest.Table`1.Delete
  name: Delete
  nameWithType: Table<T>.Delete
  fullName: Postgrest.Table<T>.Delete
  nameWithType.vb: Table(Of T).Delete
  fullName.vb: Postgrest.Table(Of T).Delete
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Postgrest.Table`1.Single*
  commentId: Overload:Postgrest.Table`1.Single
  name: Single
  nameWithType: Table<T>.Single
  fullName: Postgrest.Table<T>.Single
  nameWithType.vb: Table(Of T).Single
  fullName.vb: Postgrest.Table(Of T).Single
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Postgrest.Table`1.Get*
  commentId: Overload:Postgrest.Table`1.Get
  name: Get
  nameWithType: Table<T>.Get
  fullName: Postgrest.Table<T>.Get
  nameWithType.vb: Table(Of T).Get
  fullName.vb: Postgrest.Table(Of T).Get
- uid: Postgrest.Table`1.Clear*
  commentId: Overload:Postgrest.Table`1.Clear
  name: Clear
  nameWithType: Table<T>.Clear
  fullName: Postgrest.Table<T>.Clear
  nameWithType.vb: Table(Of T).Clear
  fullName.vb: Postgrest.Table(Of T).Clear
